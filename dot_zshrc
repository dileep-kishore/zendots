# vim:ft=zsh

# History options should be set in .zshrc and after oh-my-zsh sourcing.
# See https://github.com/nix-community/home-manager/issues/177.
HISTSIZE="10000"
SAVEHIST="10000"

HISTFILE="$HOME/.zsh_history"
mkdir -p "$(dirname "$HISTFILE")"

# History-related options
setopt HIST_FCNTL_LOCK HIST_IGNORE_DUPS HIST_IGNORE_SPACE SHARE_HISTORY EXTENDED_HISTORY INC_APPEND_HISTORY APPEND_HISTORY
unsetopt HIST_IGNORE_ALL_DUPS HIST_SAVE_NO_DUPS HIST_FIND_NO_DUPS HIST_EXPIRE_DUPS_FIRST

# Completion and correction options
setopt CORRECT CORRECT_ALL MENU_COMPLETE

# Pushd/cd-related options
setopt AUTOCD PUSHDTOHOME CDABLEVARS AUTOPUSHD PUSHD_SILENT PUSHD_MINUS

# Miscellaneous options
setopt NOTIFY GLOBDOTS AUTOLIST REC_EXACT LONG_LIST_JOBS INTERACTIVE_COMMENTS AUTORESUME EXTENDED_GLOB RC_QUOTES MAIL_WARNING RM_STAR_WAIT ALL_EXPORT
unsetopt BG_NICE AUTO_PARAM_SLASH

autoload -Uz compinit
compinit

# If I am on nersc, then export TERM=xterm-256color
if [[ $HOME == "/global/homes/d/dkishore" ]]; then
    export TERM=xterm-256color
fi

# Variables
export EDITOR=nvim
export USE_EDITOR=$EDITOR
export VISUAL=$EDITOR
# export BROWSER=brave-browser
export GIT_PAGER="delta"
export FZF_DEFAULT_OPTS="\
    --height 40% --reverse --preview 'bat --style=numbers --color=always --line-range :100 {}'\
    --color=bg+:#313244,bg:#1e1e2e,spinner:#f5e0dc,hl:#f38ba8 \
    --color=fg:#cdd6f4,header:#f38ba8,info:#cba6f7,pointer:#f5e0dc \
    --color=marker:#f5e0dc,fg+:#cdd6f4,prompt:#cba6f7,hl+:#f38ba8"

export PATH=$PATH:$HOME/.local/bin
export PATH="$PATH:/var/lib/flatpak/exports/bin"
export PATH="$PATH:$HOME/npm-global/bin"
export PATH="$HOME/.pixi/bin:$PATH"
. "$HOME/.cargo/env"

### Added by Zinit's installer
if [[ ! -f $HOME/.local/share/zinit/zinit.git/zinit.zsh ]]; then
    print -P "%F{33} %F{220}Installing %F{33}ZDHARMA-CONTINUUM%F{220} Initiative Plugin Manager (%F{33}zdharma-continuum/zinit%F{220})…%f"
    command mkdir -p "$HOME/.local/share/zinit" && command chmod g-rwX "$HOME/.local/share/zinit"
    command git clone https://github.com/zdharma-continuum/zinit "$HOME/.local/share/zinit/zinit.git" && \
        print -P "%F{33} %F{34}Installation successful.%f%b" || \
        print -P "%F{160} The clone has failed.%f%b"
fi

source "$HOME/.local/share/zinit/zinit.git/zinit.zsh"
autoload -Uz _zinit
(( ${+_comps} )) && _comps[zinit]=_zinit

# Load a few important annexes, without Turbo
# (this is currently required for annexes)
zinit light-mode for \
    zdharma-continuum/zinit-annex-as-monitor \
    zdharma-continuum/zinit-annex-bin-gem-node \
    zdharma-continuum/zinit-annex-patch-dl \
    zdharma-continuum/zinit-annex-rust

# Plugins
zinit wait lucid for \
  OMZL::git.zsh \
  OMZP::git-extras \
  OMZP::git \
  wfxr/forgit

# important libraries
zinit lucid for \
    OMZL::clipboard.zsh \
    OMZL::compfix.zsh \
    OMZL::history.zsh \
    OMZL::spectrum.zsh

# important plugins
zinit ice depth=1
zinit light jeffreytse/zsh-vi-mode
zinit light djui/alias-tips

zinit wait lucid for \
    OMZP::asdf \
    OMZP::aliases \
    OMZP::copypath \
    OMZP::colored-man-pages \
    OMZP::direnv \
    OMZP::extract \
    OMZP::magic-enter \
    OMZP::npm \
    OMZP::python \
    OMZP::tmux \
    OMZP::web-search

zinit wait lucid for \
 atinit"ZINIT[COMPINIT_OPTS]=-C; zpcompinit; zpcdreplay" \
    zdharma-continuum/fast-syntax-highlighting \
 atload"_zsh_autosuggest_start; bindkey '^ ' autosuggest-accept" \
    zsh-users/zsh-autosuggestions \
 blockf atpull'zinit creinstall -q .' \
    zsh-users/zsh-completions

### End of Zinit's installer chunk

# Only run these if the file exists
if [[ -f /home/linuxbrew/.linuxbrew/bin/brew ]]; then
    eval "$(/home/linuxbrew/.linuxbrew/bin/brew shellenv)"
fi

# If ruby is installed using pixi, then add this to PATH /global/homes/d/dkishore/.pixi/envs/ruby/share/rubygems/gems/tmuxinator-3.3.5/bin/
if [[ -f /global/homes/d/dkishore/.pixi/envs/ruby/share/rubygems/gems/tmuxinator-3.3.5/bin/tmuxinator ]]; then
    export PATH="$PATH:/global/homes/d/dkishore/.pixi/envs/ruby/share/rubygems/gems/tmuxinator-3.3.5/bin"
fi

# carapace
setopt menucomplete
export LS_COLORS=$(vivid generate catppuccin-mocha)
zstyle ':completion:*' menu select
export CARAPACE_BRIDGES='zsh,fish,bash,inshellisense' # optional
zstyle ':completion:*' format $'\e[2;37mCompleting %d\e[m'
zstyle ':completion:*' list-colors $LS_COLORS
source <(carapace _carapace)

# aliases
alias bat="bat --theme='Catppuccin Mocha' --style='numbers,changes,header'"
alias y="yazi"
alias lg="lazygit"
alias gst="git status --short"
alias du="dua i"
alias vimipython="ipython --TerminalInteractiveShell.editing_mode=vi"
alias grep="grep --color=auto"
alias psgrep="ps aux | grep -v grep | grep -i -e VSZ -e"
alias df="df -ahiT --total"
alias clear="clear -x"
alias rm="rm -i"
alias cls="clear"
alias exportforge="export PATH=$HOME/miniforge3/bin:$PATH"
alias myip="curl http://ipecho.net/plain; echo"

# eza
alias eza='eza --icons auto --git'
alias la='eza -a'
alias ll='eza -l'
alias lla='eza -la'
alias ls=eza
alias lt='eza --tree'

# Tmux
alias ta="sesh connect"
alias tdetach="tmux detach"
alias tkill="tmux kill-session -t"
alias tlist="sesh list -tT --icons"
tnew() {
    bash ~/.config/tmux/scripts/templater.sh "$@"
    tmuxinator start "$1"
}

# AI secrets
export OPENAI_API_KEY="$(cat ~/.secrets/openai.txt)"
export ANTHROPIC_API_KEY="$(cat ~/.secrets/anthropic.txt)"
export GEMINI_API_KEY="$(cat ~/.secrets/gemini.txt)"
export TAVILY_API_KEY="$(cat ~/.secrets/tavily.txt)"


eval "$(zoxide init --cmd cd zsh)"
eval "$(atuin init zsh)"
eval "$(tv init zsh)"
# eval "$(starship init zsh)"
eval "$(oh-my-posh init zsh --config '~/.config/ohmyposh/config.json')"

# HACK: custom transient prompt (since oh-my-posh transient prompt is broken with atuin use this)
autoload -Uz add-zsh-hook
add-zsh-hook precmd transient-prompt-precmd

# Catppuccin Mocha colors
local lavender='%F{#b4befe}'
local mauve='%F{#cba6f7}'
local red='%F{#f38ba8}'
local reset='%f'

function transient-prompt-precmd {
    # Fix ctrl+c behavior
    TRAPINT() { transient-prompt; return $(( 128 + $1 )) }

    # Build transient prompt with color based on exit code
    local prompt_color="${lavender}"
    local arrow_color="${mauve}"

    # Check last exit code and use red if it failed
    if [[ $? -ne 0 ]]; then
        prompt_color="${red}"
        arrow_color="${red}"
    fi

    # Save transient prompt: newline + PWD in lavender/red + arrow in mauve/red
    SAVED_PROMPT=$'\n'"${prompt_color}%~${arrow_color} ➜ ${reset}"
    SAVED_RPROMPT=""
}

autoload -Uz add-zle-hook-widget
add-zle-hook-widget zle-line-finish transient-prompt
function transient-prompt() {
    # Use saved transient prompt
    PROMPT="$SAVED_PROMPT" RPROMPT="$SAVED_RPROMPT" zle .reset-prompt
}

# forced bindings
zvm_after_init_commands+=("bindkey '^r' atuin-search")
# bindkey '^r' atuin-search

# ai chat
_aichat_zsh() {
    if [[ -n "$BUFFER" ]]; then
        local _old=$BUFFER
        BUFFER+="⌛"
        zle -I && zle redisplay
        BUFFER=$(aichat -e "$_old")
        zle end-of-line
    fi
}
zle -N _aichat_zsh
bindkey '\ee' _aichat_zsh
